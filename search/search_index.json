{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crazy Imports - treat your data as your code crazyimports module allows you to use your data files as if it was python modules Documentation GitHub repo Simple example Install crazyimports module pip install -U crazyimports Create example.json file with this content { \"number\" : 42 } Than in the same directory create test.py file import crazyimports import example print ( example . number ) Then when you run python test.py you would see 42 output in your command line You can find more examles in exaples section of documentation Supported file extensions .json for JSON files .sqlite3 and .sqlite for SQLite3 database files .csv for CSV (Comma Separated Values) files .yaml and .yml for YAML files .pickle for pickle files Credits Heavily inspired by this talk by @bobuk","title":"Home"},{"location":"#crazy-imports-treat-your-data-as-your-code","text":"crazyimports module allows you to use your data files as if it was python modules Documentation GitHub repo","title":"Crazy Imports - treat your data as your code"},{"location":"#simple-example","text":"Install crazyimports module pip install -U crazyimports Create example.json file with this content { \"number\" : 42 } Than in the same directory create test.py file import crazyimports import example print ( example . number ) Then when you run python test.py you would see 42 output in your command line You can find more examles in exaples section of documentation","title":"Simple example"},{"location":"#supported-file-extensions","text":".json for JSON files .sqlite3 and .sqlite for SQLite3 database files .csv for CSV (Comma Separated Values) files .yaml and .yml for YAML files .pickle for pickle files","title":"Supported file extensions"},{"location":"#credits","text":"Heavily inspired by this talk by @bobuk","title":"Credits"},{"location":"contributing/","text":"Contributing to Crazy Imports Project structure /crazyimports - module itself /examples - examplese of using crazyimports /tests - tests for crazyimports /docs - markdown files to generate documentation with mkdocs Useful commands First, you need to install all dev depenencies make install-dev After you made changes and wrote tests for them, run the tests make test Before commit run this to make sure your code is properly formatted and documentation is up to date make prepare-push","title":"Contributing"},{"location":"contributing/#contributing-to-crazy-imports","text":"","title":"Contributing to Crazy Imports"},{"location":"contributing/#project-structure","text":"/crazyimports - module itself /examples - examplese of using crazyimports /tests - tests for crazyimports /docs - markdown files to generate documentation with mkdocs","title":"Project structure"},{"location":"contributing/#useful-commands","text":"First, you need to install all dev depenencies make install-dev After you made changes and wrote tests for them, run the tests make test Before commit run this to make sure your code is properly formatted and documentation is up to date make prepare-push","title":"Useful commands"},{"location":"credits/","text":"Inspiration This package was heavily inspired by this talk by @bobuk : Core code was borrowed from this gist:","title":"Credits"},{"location":"credits/#inspiration","text":"This package was heavily inspired by this talk by @bobuk : Core code was borrowed from this gist:","title":"Inspiration"},{"location":"installation/","text":"Installation To install basic version of crazyimports module run the following command pip install -U crazyimports If you need YAML files support run the following command pip install -U \"crazyimports[yaml]\"","title":"Instalaltion"},{"location":"installation/#installation","text":"To install basic version of crazyimports module run the following command pip install -U crazyimports If you need YAML files support run the following command pip install -U \"crazyimports[yaml]\"","title":"Installation"},{"location":"examples/csv/","text":"CSV Create file with the name example_table.csv 1,23,34,23 apple, orange, pineapple, grape Then create python file like this import crazyimports import example_table for row in example_table . data : print ( \", \" . join ( row )) Rows of CSV files stored in a list <file_name>.data CSV files should have .csv extension","title":"CSV"},{"location":"examples/csv/#csv","text":"Create file with the name example_table.csv 1,23,34,23 apple, orange, pineapple, grape Then create python file like this import crazyimports import example_table for row in example_table . data : print ( \", \" . join ( row )) Rows of CSV files stored in a list <file_name>.data CSV files should have .csv extension","title":"CSV"},{"location":"examples/json/","text":"JSON Create file with the name config.json { \"number\" : 42 } Then create python file like this import crazyimports import config print ( config . number ) All top level properties from JSON file stored in attributes of a imported module JSON files should have .json extension","title":"JSON"},{"location":"examples/json/#json","text":"Create file with the name config.json { \"number\" : 42 } Then create python file like this import crazyimports import config print ( config . number ) All top level properties from JSON file stored in attributes of a imported module JSON files should have .json extension","title":"JSON"},{"location":"examples/pickle/","text":"Pickle Create file with the name init_pickle.py and the folowing script import pickle test_list = [ 1 , 2 , 3 , 4 , 5 ] test_list2 = [ 10 , 20 , 30 , 40 , 50 ] class TestClass : def __init__ ( self , a : int , b : int ): self . a = a self . b = b def sum ( self ) -> int : return self . a + self . b with open ( \"pickle_file.pickle\" , \"wb\" ) as file : pickle . dump (( test_list , test_list2 , TestClass ), file ) Then create python file like this import crazyimports from init_pickle import TestClass import pickle_file list1 , list2 , class1 = pickle_file . data print ( list1 , list2 ) print ( class1 ( 1 , 2 ) . sum ()) All objects from Pickle file stored in a <file_name>.data . If there are multiple objects stored in Pickle file then <file_name>.data would be a tuple Pickle files should have .pickle extension","title":"Pickle"},{"location":"examples/pickle/#pickle","text":"Create file with the name init_pickle.py and the folowing script import pickle test_list = [ 1 , 2 , 3 , 4 , 5 ] test_list2 = [ 10 , 20 , 30 , 40 , 50 ] class TestClass : def __init__ ( self , a : int , b : int ): self . a = a self . b = b def sum ( self ) -> int : return self . a + self . b with open ( \"pickle_file.pickle\" , \"wb\" ) as file : pickle . dump (( test_list , test_list2 , TestClass ), file ) Then create python file like this import crazyimports from init_pickle import TestClass import pickle_file list1 , list2 , class1 = pickle_file . data print ( list1 , list2 ) print ( class1 ( 1 , 2 ) . sum ()) All objects from Pickle file stored in a <file_name>.data . If there are multiple objects stored in Pickle file then <file_name>.data would be a tuple Pickle files should have .pickle extension","title":"Pickle"},{"location":"examples/sqlite/","text":"SQLite Generate database file with folowing script import sqlite3 conn = sqlite3 . connect ( \"database.sqlite3\" ) cur = conn . cursor () cur . execute ( \"CREATE TABLE table(id integer PRIMARY KEY, text text)\" ) text_snippet = \"orange\" cur . execute ( \"INSERT INTO table (id, text) VALUES (?, ?)\" , ( 1 , text_snippet )) conn . commit () cur . close () conn . close () Then create python file like this import crazyimports import database print ( database . table [ 0 ][ \"text\" ]) All tables from SQLite file stored in attributes of a imported module SQLite files should have .sqlite or .sqlite3 extensions","title":"SQLite"},{"location":"examples/sqlite/#sqlite","text":"Generate database file with folowing script import sqlite3 conn = sqlite3 . connect ( \"database.sqlite3\" ) cur = conn . cursor () cur . execute ( \"CREATE TABLE table(id integer PRIMARY KEY, text text)\" ) text_snippet = \"orange\" cur . execute ( \"INSERT INTO table (id, text) VALUES (?, ?)\" , ( 1 , text_snippet )) conn . commit () cur . close () conn . close () Then create python file like this import crazyimports import database print ( database . table [ 0 ][ \"text\" ]) All tables from SQLite file stored in attributes of a imported module SQLite files should have .sqlite or .sqlite3 extensions","title":"SQLite"},{"location":"examples/yaml/","text":"YAML Create file with the name config.yaml number : 42 Then create python file like this import crazyimports import config print ( config . number ) All top level properties from YAML file stored in attributes of a imported module YAML files should have .yaml or .yml extensions","title":"YAML"},{"location":"examples/yaml/#yaml","text":"Create file with the name config.yaml number : 42 Then create python file like this import crazyimports import config print ( config . number ) All top level properties from YAML file stored in attributes of a imported module YAML files should have .yaml or .yml extensions","title":"YAML"}]}